using Cryptography;

namespace Servers
{
    /// <summary>
    /// Класс, представляющий собой модуль cервера.<br/>
    /// Ожидает, получает сигналы от клиентов, устанавливает с ними соединение, обрабатывает их сигналы, хранит сообщения и пересылает их клиентам<br/>
    /// Устанавливется отдельно от приложения на устройстве (или сервере) и работает постоянно
    /// </summary>
    public class Server : Form
    {
        /// <summary>
        /// Конструктор класса.
        /// </summary>
        public Server()
        {
            //Настройка основных полей аккаунта, подготовка к приемё сигналов
            //Начало фонового потока с функцией ThreadFunc()
        }

        /// <summary>
        /// Потоковая функция обработки поступающих сигналов.<br/>
        /// Стоит в ожидании и ловит сигналы от клиентов, обрабатывает их и посылает обратно/сохраняет изменения у себя
        /// Принимает также сообщения и сохраняет их у себя, а также пересылает их при запросе от других клиентов (получателей)
        /// </summary>
        /// <returns>Код выполнения работы (-1 в случае сбоя, 0 в случае завершения работы)</returns>
        public int ThreadFunc()
        {
            while (true)
            {
                try
                {
                    //Потоковая функция для постоянного ожидания сигналов, данных и т.д
                    //Принимает сигналы от клиентов и присваивает их аккаунтам
                    //Периодически пингует активные аккаунты и если они не отвечают - ставит статус "не в сети"
                    //Если аккаунт отвечает но ничего не посылает далее - ставит статус "отошёл"
                }
                catch (/*Исключение*/)
                {
                    //Обработка исключения
                }
                catch (/*Необрабатываемое исключение*/)
                {
                    //Сообщение
                    //Прерывание сессий
                    return -1;
                }
            }
        }

        /// <summary>
        /// Отправка сигнала клиенту об удалении данного сообщения<br/>
        /// Может быть отправлено как отправителю, так и получателю, в зависимости от получаемого сигнала от клиента
        /// </summary>
        /// <param name="sender">Отправитель сообщения</param>
        /// <param name="reciever">Получатель сообщения</param>
        /// <param name="ms">Сообщение, которое надо удалить</param>
        /// <param name="isClear">Если true - отправить сигнал и для получателя</param>
        /// <returns>true - клиент ответил на сигнал<br/>false - клиент не ответил</returns>
        public bool SendDeleteSignal(Account sender, Account reciever, Message ms, bool isClear)
        {
            //Отправка сигнала о том, что сообщение должно быть удалено у клиента
            //Если isClear = true, то cигнал об удалении отправляется и для клиента получателя
        }

        /// <summary>
        /// Отправка сигнала клиенту о прочтении его сообщения получателем<br/>
        /// </summary>
        /// <param name="sender">Отправитель сообщения</param>
        /// <param name="reciever">Получатель сообщения</param>
        /// <param name="ms">Прочитанное сообщение</param>
        /// <returns>true - клиент ответил на сигнал<br/>false - клиент не ответил</returns>
        public bool SendReadedSignal(Account sender, Account reciever, Message ms)
        {
            //Отправка сигнала о том, что сообщение было прочитано получаетелем
        }

        /// <summary>
        /// Отправка сигнала клиенту о том, что его письмо было загружено клиентом получателя<br/>
        /// </summary>
        /// <param name="sender">Отправитель сообщения</param>
        /// <param name="reciever">Получатель сообщения</param>
        /// <param name="ms">Загруженное сообщение</param>
        /// <returns>true - клиент ответил на сигнал<br/>false - клиент не ответил</returns>
        public bool SendRecievedSignal(Account sender, Account reciever, Message ms)
        {
            //Отправка сигнала о том, что сообщение было отправлено на клиент получателя
        }

        /// <summary>
        /// Установка статуса учетной записи<br/>
        /// Может быть "в сети", "не в сети", "отошёл" и т.д.<br/>
        /// При изменении статуса всем активным клиентам посылается сигнал об изменении статуса контакта
        /// </summary>
        /// <param name="acc">Учетная запись, подверженная изменению</param>
        /// <param name="stat">Новый статус</param>
        private void SetStatus(Account acc, string stat)
        {
            //Установка статуса аккаунта
            BroadcastStatus(acc);
        }

        /// <summary>
        /// Отправка всем активным контактам учетной записи сигнал об изменении статуса учетной записи
        /// </summary>
        /// <param name="acc">Учетная запись</param>
        public void BroadcastStatus(Account acc)
        {
            //Отправка сигнала о статусе аккаунта (в сети, не в сети)
        }

        /// <summary>
        /// Отправка клиенту учетной записи сигнала проверки, подключен тот или нет, ожидание ответа
        /// </summary>
        /// <param name="acc">Учетная запись для пинга</param>
        /// <returns>true - клиент ответил<br/>false - клиент не ответил</returns>
        public bool Ping(Account acc)
        {
            //Отправка сигнала на клиент для проверки, отвечает тот или нет
        }

        /// <summary>
        /// Обмен ключами шифрования с клиентом данного аккаунта
        /// </summary>
        /// <param name="acc">Учетная запись клиента</param>
        /// <returns>true - обмен произошёл успешно<br/>false - при обмене произошла некоторая ошибка</returns>
        public bool KeyExchange(Account acc)
        {
            Cryptography.CreateKey(true);
            //Обмен ключами ассиметричного алгоритма для передачи ключей симметричного алгоритма для шифрования/расшифрования данных
        }

        /// <summary>
        /// Получение истории сообщений данной учетной записи
        /// </summary>
        /// <param name="acc">Учетная запись клиента</param>
        /// <returns>Массив сообщений от данной учетной записи</returns>
        public Message[] GetMessageHistory(Account acc)
        {
            //Возвращение списка сообщений, отправляемых этим аккаунтом
        }

        /// <summary>
        /// Сохранение полученного сообщения за учетной записью отправителя/получателя
        /// </summary>
        /// <param name="acc">Учетная запись клиента</param>
        /// <param name="ms">Сообщение для сохранения</param>
        public bool Save(Account acc, Message ms)
        {
            //Сохранение полученного письма данным аккаунтом.
            //Из ms получается получатель, которому также это письмо сохраняется на сервере и при получении будет передано
        }

        /// <summary>
        /// Передача истории сообщений учетной записи
        /// </summary>
        /// <param name="acc">Учетная запись клиента</param>
        /// <param name="msgs">Массив сообщений учетной записи</param>
        /// <returns>true - отправка произошла успешно<br/>false - передача неудалась или была завершена неверно</returns>
        public bool SendMessages(Account acc, Message[] msgs)
        {
            //Отправить сообщение/сообщения от сервера к клиенту
        }

    }
}